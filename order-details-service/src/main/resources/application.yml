server:
  port: 8020

spring:
  application:
    name: order-details-service
  kafka:
    bootstrap-servers: ${kafkaprops.bootstrapServers}
    consumer:
      bootstrap-servers: ${kafkaprops.bootstrapServers}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: http://localhost:8081
        specific.avro.reader: true


kafkaprops:
  bootstrapServers: localhost:9092
  schemaRegistryUrl: http://localhost:8081
  autoOffsetReset: earliest
  processingGuarantee: at_least_once
  commitInterval: 1
  sessionTimeout: 30000
  stateDir: "/tmp/kafka-streams-order-details"
  appId: ${spring.application.name}
  enableIdempotence: true
  acks: all
  clientId: ${spring.application.name}
  enableExactlyOnce: false


application:
  host: localhost
  port: ${server.port}

topicprops:
  ordersTopic: orders.v1
  ordersEnrichedTopic: orders-enriched.v1
  inventoryTopic: warehouse-inventory.v1
  orderValidationTopic: order-validations.v1
  paymentsTopic: payments.v1
  customersTopic: customers.v1
  platinumTopic: platinum.v1
  goldTopic: gold.v1
  silverTopic: silver.v1
  bronzeTopic: bronze.v1
  schemaRegistryUrl: http://localhost:8081
  partitions: 3
  replication: 1