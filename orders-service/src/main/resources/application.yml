server:
  port: 8000

spring:
  application:
    name: order-service
  mvc:
    async:
      request-timeout: 2000
  kafka:
    bootstrap-servers: ${kafkaprops.bootstrapServers}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      bootstrap-servers: ${kafkaprops.bootstrapServers}
      acks: ${kafkaprops.acks}
      client-id: ${kafkaprops.clientId}
      properties:
        enable.idempotence: ${kafkaprops.enableIdempotence}
        schema.registry.url: ${kafkaprops.schemaRegistryUrl}
        auto.register.schemas: false
    streams:
      application-id: ${spring.application.name}
      bootstrap-servers: ${kafkaprops.bootstrapServers}
      state-dir: ${kafkaprops.stateDir}
      properties:
        schema.registry.url: ${kafkaprops.schemaRegistryUrl}



kafkaprops:
  bootstrapServers: localhost:9092
  schemaRegistryUrl: http://localhost:8081
  autoOffsetReset: earliest
  processingGuarantee: at_least_once
  commitInterval: 1
  sessionTimeout: 30000
  stateDir: "/tmp/kafka-streams"
  appId: ${spring.application.name}
  enableIdempotence: false
  acks: all
  clientId: ${spring.application.name}

ordersprops:
  topic: orders.v1
  partitions: 3
  replication: 1
  storeName: orders-store

application:
  host: localhost
  port: ${server.port}