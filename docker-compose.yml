version: '3.0'
volumes:
  database:
services:
  email-service:
    build: email-service
    image: event-driven/email-service
    environment:
      - SPRING_ACTIVE_PROFILES=docker
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 512m
    depends_on:
      - kafka

  fraud-service:
    build: fraud-service
    image: event-driven/fraud-service
    environment:
      - SPRING_ACTIVE_PROFILES=docker
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 512m
    depends_on:
      - kafka

  inventory-service:
    build: inventory-service
    image: event-driven/inventory-service
    environment:
      - SPRING_ACTIVE_PROFILES=docker
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 512m
    depends_on:
      - kafka

  order-detauls-service:
    build: order-details-service
    image: event-driven/order-details-service
    environment:
      - SPRING_ACTIVE_PROFILES=docker
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 512m
    depends_on:
      - kafka

  order-enrichment-service:
    build: order-enrichment
    image: event-driven/order-enrichment
    environment:
      - SPRING_ACTIVE_PROFILES=docker
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 512m
    depends_on:
      - kafka

  orders-service:
    build: orders-service
    image: event-driven/orders-service
    environment:
      - SPRING_ACTIVE_PROFILES=docker
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 512m
    depends_on:
      - kafka

  validation-aggregator-service:
    build: validation-aggregator-service
    image: event-driven/validation-aggregator-service
    environment:
      - SPRING_ACTIVE_PROFILES=docker
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 512m
    depends_on:
      - kafka

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.2
    hostname: zookeeper
    container_name: zookeeper
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 512m
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.2
    hostname: kafka
    container_name: kafka
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 512m
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.2
    hostname: schema-registry
    container_name: schema-registry
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 512m
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  ksqldb:
    image: confluentinc/ksqldb-server:0.29.0
    hostname: ksqldb
    container_name: ksqldb
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:29092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081

  connect:
    image: confluentinc/cp-server-connect:7.5.2
    container_name: connect
    depends_on:
      - sqlite
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_GROUP_ID: "examples-microservices-orders"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect

      CONNECT_CONFIG_STORAGE_TOPIC: connect-demo-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-demo-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-demo-statuses

      CONNECT_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1

      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: "/usr/share/java/monitoring-interceptors/monitoring-interceptors-7.5.2.jar"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/,/connectors/'
    volumes:
      - database:/opt/docker/db/data
      - $PWD/stack-configs:/opt/docker/stack-configs
    command:
      - bash
      - -c
      - |
        echo "Installing connector plugins"
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.1.1
        confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:10.0.2
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run

  sqlite:
    build: ./infra/db
    image: sqlite
    container_name: sqlite
    volumes:
      - database:/db/data
    stdin_open: true
    tty: true

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.16
    container_name: elasticsearch
    depends_on:
      - connect
    ports:
      - "9200:9200"
    environment:
      xpack.security.enabled: "false"
      XPACK_SECURITY_ENABLED: "false"
      xpack.monitoring.enabled: "false"

  kibana:
    image: docker.elastic.co/kibana/kibana:5.5.2
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      xpack.security.enabled: "false"
      xpack.monitoring.enabled: "false"
      discovery.type: "single-node"
      elasticsearch.url: http://elasticsearch:9200
      server.host: "0.0.0.0"
      SERVER_HOST: "0.0.0.0"
      server.name: "kibana"
      SERVER_NAME: "kibana"
      XPACK_GRAPH_ENABLED: "false"
      XPACK_MONITORING_ENABLED: "false"
      XPACK_REPORTING_ENABLED: "false"
      XPACK_SECURITY_ENABLED: "false"
    command:
      - bash
      - -c
      - |
        /usr/share/kibana/bin/kibana-plugin remove x-pack
        /usr/local/bin/kibana-docker